void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            // Compare adjacent elements
            if (arr[j] > arr[j + 1]) {                       ------------------------->bubble sort
                // Swap arr[j] and arr[j + 1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
***********************************************************************************
void flaggedSelectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        // Initialize a flag to check if any swaps were made in this pass
        bool swapped = false;

        // Find the index of the minimum element in the unsorted portion
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
                swapped = true; // Indicate that a swap was made
            }
        }                                         ------------------------------------>selection sort

        // Swap the minimum element with the first element of the unsorted portion
        if (swapped) {
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }

        // If no swaps were made in this pass, the array is already sorted
        if (!swapped) {
            break;
        }
    }
}

***********************************************************************************************
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        // Move elements of arr[0..i-1] that are greater than key
        // to one position ahead of their current position
        while (j >= 0 && arr[j] > key) {          -------------------------------------------->insertion sort
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
**************************************************************************************************
void merge(std::vector<int>& arr, int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // Create temporary arrays
    std::vector<int> L(n1);
    std::vector<int> R(n2);

    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[middle + 1 + j];
    }

    // Merge the two sorted subarrays back into the original array
    int i = 0; // Initial index of first subarray
    int j = 0; // Initial index of second subarray
    int k = left; // Initial index of merged subarray

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];        ------------------------------------------------------------------->Merge sort
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}


void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        // Find the middle point
        int middle = left + (right - left) / 2;

        // Sort the first and second halves
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);

        // Merge the sorted halves
        merge(arr, left, middle, right);
    }
}
************************************************************************************************************

long long mergeAndCount(std::vector<int>& arr, int low, int mid, int high) {
    int leftSize = mid - low + 1;
    int rightSize = high - mid;
    std::vector<int> left(leftSize);
    std::vector<int> right(rightSize);
    
    // Copy data to temporary arrays left[] and right[]
    for (int i = 0; i < leftSize; i++) {
        left[i] = arr[low + i];
    }
    for (int i = 0; i < rightSize; i++) {
        right[i] = arr[mid + 1 + i];
    }                                                       --------------------------------------->count inversions
    
    long long inversionCount = 0; // Initialize the inversion count
    
    int i = 0; // Initial index of left subarray
    int j = 0; // Initial index of right subarray
    int k = low; // Initial index of merged subarray
    
    while (i < leftSize && j < rightSize) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
            
            // If left element is greater than right element, it's an inversion
            inversionCount += (long long)(leftSize - i);
        }
    }
    
    // Copy the remaining elements of left[], if any
    while (i < leftSize) {
        arr[k++] = left[i++];
    }
    
    // Copy the remaining elements of right[], if any
    while (j < rightSize) {
        arr[k++] = right[j++];
    }
    
    return inversionCount;
}


long long mergeSortAndCount(std::vector<int>& arr, int low, int high) {
    long long inversionCount = 0;
    if (low < high) {
        int mid = low + (high - low) / 2;
        
        // Recursively split and count inversions in the left and right subarrays
        inversionCount += mergeSortAndCount(arr, low, mid);
        inversionCount += mergeSortAndCount(arr, mid + 1, high);
        
        // Merge the two sorted subarrays and count inversions during merging
        inversionCount += mergeAndCount(arr, low, mid, high);
    }
    return inversionCount;
}
***********************************************************************************************************
int lomutoPartition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Choose the last element as the pivot
    int i = low - 1; // Index of the smaller element

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }                                                                    --------------------------------------->Lomuto Partition

    std::swap(arr[i + 1], arr[high]); // Place the pivot element in its correct position
    return i + 1;
}
**************************************************************************************************************
int hoarePartition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[low]; // Choose the first element as the pivot
    int i = low - 1; // Initialize left pointer
    int j = high + 1; // Initialize right pointer

    while (true) {
        do {
            i++;
        } while (arr[i] < pivot);                             --------------------------------------->Hoare's Partition


        do {
            j--;
        } while (arr[j] > pivot);

        if (i >= j) {
            return j;
        }

        std::swap(arr[i], arr[j]);
    }
}
*****************************************************************************************************************
int lomutoPartition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }

    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}                                                            --------------------------------------->kth smallest element

int kthSmallestLomuto(std::vector<int>& arr, int low, int high, int k) {
    if (low <= high) {
        int pivotIndex = lomutoPartition(arr, low, high);

        if (pivotIndex == k - 1) {
            return arr[pivotIndex];
        } else if (pivotIndex > k - 1) {
            return kthSmallestLomuto(arr, low, pivotIndex - 1, k);
        } else {
            return kthSmallestLomuto(arr, pivotIndex + 1, high, k);
        }
    }

    // If k is out of bounds, return an error value.
    return -1;
}
*********************************************************************************************************************
Dutch Natinal FLag Algorithm

void dutchNationalFlag(std::vector<int>& arr, int pivot) {
    int low = 0;          // Index for elements less than the pivot
    int high = arr.size() - 1;  // Index for elements greater than the pivot
    int i = 0;             // Index for iterating through the array

    while (i <= high) {
        if (arr[i] < pivot) {
            // Swap the element at index i with the element at index low
            std::swap(arr[i], arr[low]);
            low++;                                                                       --------------------------------------->Dutch Natinal FLag Algorithm
            i++;
        } else if (arr[i] > pivot) {
            // Swap the element at index i with the element at index high
            std::swap(arr[i], arr[high]);
            high--;
        } else {
            // Element at index i is equal to the pivot, move to the next element
            i++;
        }
    }
}
